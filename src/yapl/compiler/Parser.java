/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package yapl.compiler;
import java.io.*;
import yapl.lib.*;
import yapl.impl.SymboltableImpl;
import yapl.interfaces.Symbol;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import yapl.interfaces.Attrib;
import yapl.compiler.CodeGenImpl;
import yapl.impl.AttribImpl;
import yapl.interfaces.CompilerError;

public class Parser implements ParserConstants {

    static String program = ""; //program name = identifier in Program production
    static CodeGenImpl codegen;
    static SymboltableImpl symboletable = new SymboltableImpl();
    static CompilerMessage msg = new CompilerMessage(); //prints to System.er (is set to log file in main)


    /** Main entry point. */
    public static void main(String args[]) throws IOException {
        Parser parser;

        try {
            //** Loading the given arguments **
            InputStream predefindeProceduresInput = new FileInputStream(args[0]);
            InputStream programInput = new FileInputStream(args[1]);

            PrintStream printStream = new PrintStream(args[2]); //args[2] is the log file
            System.setErr(printStream); //now it prints to the log file

            OutputStream outStream = new FileOutputStream(args[3]); //args[3] is the output file where to write the code to
            codegen = new CodeGenImpl(outStream);

            //** parse predefined Procedures ***
            parser = new Parser(predefindeProceduresInput); //args[0] is location of predefinedProcedures
            try{
                parser.PredefinedProcedures();
            }catch(ParseException pe){
                 //throws ParseException on syntax errors; errorNo=3
                 msg.printError(pe, program);
            }catch(TokenMgrError te){
                  //throws TokenMgrError on lexical errors; errorNo=2
                 msg.printError(te, program);
            }catch(YAPLException e){
                 msg.printError(e, program);
            }

            //** parse the program ***
            //parser = new Parser(new java.io.FileInputStream(args[1]));
            parser.ReInit(programInput);
            try{
                 parser.Program(); //call start production
                 msg.printOK(program);

            }catch(ParseException pe){
                //throws ParseException on syntax errors; errorNo=3
                msg.printError(pe, program);

            }catch(TokenMgrError te){
                 //throws TokenMgrError on lexical errors; errorNo=2
                msg.printError(te, program);
            }catch(YAPLException e){
                 msg.printError(e, program);
            }

        }catch(java.io.FileNotFoundException e){
            System.out.println (e.toString());
            return;
        }

    }

    public static void setProgramName(String ident){
         program = ident;
    }

    public static void expr_checkError(Attrib x, Attrib y, Token op) throws YAPLException{


        // check if x & y are compatible with op
        List<String> int_op = List.of("*", "/", "%", "+" , "-");
        if(int_op.contains(op.image) && (!(x.getType() instanceof IntType) || !(y.getType() instanceof IntType))){
           throw new YAPLException(CompilerError.IllegalOp2Type, op);
        }

        List<String> rel_op = List.of("<", "<=", ">", ">=");
        if(rel_op.contains(op.image) && (!(x.getType() instanceof IntType) || !(y.getType() instanceof IntType))){
           throw new YAPLException(CompilerError.IllegalRelOpType, op);
        }

        List<String> equ_op = List.of("==", "!=");
        Boolean con1 = (x.getType() instanceof IntType || x.getType() instanceof BoolType);
        Boolean con2 = (y.getType() instanceof IntType || y.getType() instanceof BoolType);
        Boolean con3 = x.getType().isCompatible(y.getType());

        if(equ_op.contains(op.image) && !(con1 && con2 && con3)){
            throw new YAPLException(CompilerError.IllegalEqualOpType, op);
        }

        List<String> con_op = List.of("And", "Or");
        if(con_op.contains(op.image) && (!(x.getType() instanceof BoolType) || !(y.getType() instanceof BoolType))){
            throw new YAPLException(CompilerError.IllegalOp2Type, op);
        }

        //check if x & y are compatible
        if ( !x.getType().isCompatible(y.getType())){
             throw new YAPLException(CompilerError.IllegalOp2Type, op);
        }

    }

// ************** Predefined Procedures *******************
  static final public 
void PredefinedProcedures() throws ParseException, YAPLException {
symboletable.openScope(true);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PROCEDURE:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ProcedureHead();
    }
    jj_consume_token(0);
}

  static final public void ProcedureHead() throws ParseException, YAPLException {Token t, id; Type returntype; List<Type> parameters;
parameters = new ArrayList<>();
    jj_consume_token(PROCEDURE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      t = jj_consume_token(INT);
returntype = new IntType();
      break;
      }
    case VOID:{
      t = jj_consume_token(VOID);
returntype = new VoidType();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    id = jj_consume_token(ident);
    jj_consume_token(PAR_LEFT);
symboletable.openScope(false);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOL:
    case ident:{
      parameters = FormalParamList();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(PAR_RIGHT);
symboletable.closeScope();
         ProcedureType type = new ProcedureType(returntype, parameters);
         symboletable.makeSymbol(id, Symbol.Procedure, type);
    jj_consume_token(SEMICOLON);
}

// *************** Program *********************************

/** Root production. Tutor called it ASTProgram Program()*/
  static final public void Program() throws ParseException, YAPLException {Token t; Symbol s;
    jj_consume_token(PROGRAM);
    t = jj_consume_token(ident);
setProgramName(t.toString());
          // make symbol of kind 'program' with name <ident>,
          // belongs to scope of global namespace containing predefined procedures
         s = symboletable.makeSymbol(t, Symbol.Program, null);
          // open scope of program global
         symboletable.openScopeWithParent(true, s);
         s.setType(new ProcedureType(new VoidType(), null));
         codegen.enterProc(s);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DECL:
      case PROCEDURE:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DECL:{
        Decl();
        break;
        }
      case PROCEDURE:{
        Procedure();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t = jj_consume_token(BEGIN);
    StatementList(s);
    t = jj_consume_token(END);
    t = jj_consume_token(ident);
symboletable.checkProgramEnd(t);
          //close scope of program
          symboletable.closeScope();
          symboletable.closeScope();        // closes scope of predefined procedures
     codegen.exitProc(s);
    jj_consume_token(DOT);
    jj_consume_token(0);
}

/** OPERATORS **/
  static final public Token RelOp() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LESS:{
      t = jj_consume_token(LESS);
{if ("" != null) return t;}
      break;
      }
    case LESS_EQUAL:{
      t = jj_consume_token(LESS_EQUAL);
{if ("" != null) return t;}
      break;
      }
    case GREATER_EQAUL:{
      t = jj_consume_token(GREATER_EQAUL);
{if ("" != null) return t;}
      break;
      }
    case GREATER:{
      t = jj_consume_token(GREATER);
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Token EqualOp() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      t = jj_consume_token(EQUAL);
{if ("" != null) return t;}
      break;
      }
    case NOT_EQUAL:{
      t = jj_consume_token(NOT_EQUAL);
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Token AddOp() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      t = jj_consume_token(PLUS);
{if ("" != null) return t;}
      break;
      }
    case MINUS:{
      t = jj_consume_token(MINUS);
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Token MulOp() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULT:{
      t = jj_consume_token(MULT);
{if ("" != null) return t;}
      break;
      }
    case DIV:{
      t = jj_consume_token(DIV);
{if ("" != null) return t;}
      break;
      }
    case MOD:{
      t = jj_consume_token(MOD);
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

//** **//
  static final public Attrib Literal() throws ParseException {Token tok;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      tok = jj_consume_token(TRUE);
{if ("" != null) return new yapl.impl.AttribImpl(Attrib.Constant, new BoolType(true), tok);}
      break;
      }
    case FALSE:{
      tok = jj_consume_token(FALSE);
{if ("" != null) return new yapl.impl.AttribImpl(Attrib.Constant, new BoolType(false), tok);}
      break;
      }
    case number:{
      tok = jj_consume_token(number);
{if ("" != null) return new yapl.impl.AttribImpl(Attrib.Constant, new IntType(Integer.parseInt(tok.image)), tok);}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Attrib Selector(Attrib leftside) throws ParseException, YAPLException {Token t, t2; Attrib attr, index; Type type;
codegen.loadValue(leftside);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BRACKET_LEFT:{
      t = jj_consume_token(BRACKET_LEFT);
      index = Expr();
      t2 = jj_consume_token(BRACKET_RIGHT);
if( !(leftside.getType() instanceof ArrayType)){
                                    {if (true) throw new YAPLException(CompilerError.SelectorNotArray, t);} // [ is the token
                            }
                            if (!(index.getType() instanceof IntType)){
                                    {if (true) throw new YAPLException(CompilerError.BadArraySelector, t2);} // ] is the token
                            }

                            ArrayType array = (ArrayType) leftside.getType();
                            int dim = array.getDim();
                            if( dim < 1){
                                {if (true) throw new YAPLException(CompilerError.BadArraySelector, t2);} // ] is the token
                            }

                            // todo understand
                            codegen.arrayOffset(leftside, index);
                            if(dim == 1){
                                //  a[] // singel index expresion -> a.subarray() (type)
                                type = array.getBase();
                                attr = index;
                                attr.setType(type);

                            }else{
                                //  a[][][]  a.dim() = 3 //-> a.base() (type)
                                type = array.getSubarray();
                                attr = index;
                                attr.setType(type);

                            }
      break;
      }
    case DOT:{
      t2 = jj_consume_token(DOT);
      t = jj_consume_token(ident);
if( !(leftside.getType() instanceof RecordType)){
                    {if (true) throw new YAPLException(CompilerError.SelectorNotRecord, t2);}
           }
           RecordType record = (RecordType) leftside.getType();
           Type fieldType = record.getFieldType(t.image);
           if(fieldType == null){
                String recordName = record.getRecord_name();
                //String fieldName = t.image;
                {if (true) throw new YAPLException(CompilerError.InvalidRecordField, t, recordName);}
           }
           //attr incase of Selector
           attr = new AttribImpl(leftside.getKind(), fieldType, t); //todo is kind right?

      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:
    case BRACKET_LEFT:{
      attr = Selector(attr);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
{if ("" != null) return attr;}
    throw new Error("Missing return statement in function");
}

  static final public Attrib ArrayLen() throws ParseException, YAPLException {Token t, t2; Symbol sym; Attrib attr; Type type; int length;
    // #a
         t2 = jj_consume_token(SHARP);
    t = jj_consume_token(ident);
List<Integer> kinds = Arrays.asList(Symbol.Variable, Symbol.Parameter);
        symboletable.checkSymbolKind(t, kinds);
        //make attribute for selector
        sym = symboletable.lookup(t.image);
        attr = new yapl.impl.AttribImpl(sym, t);
        //need to check symbole type
        if(!(sym.getType() instanceof ArrayType)){
           {if (true) throw new YAPLException(CompilerError.ArrayLenNotArray, t2);}
        }

        //todo length of ident incase there is no []
        length = -1; //todo calculate length

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:
    case BRACKET_LEFT:{
      attr = Selector(attr);
// if we have a[] we need to make sure this returns array
                if(!(attr.getType() instanceof ArrayType)){
                   {if (true) throw new YAPLException(CompilerError.ArrayLenNotArray, t2);}
                }
                length = -1; //todo calculate length

      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
attr = codegen.arrayLength(attr);
        attr.setToken(t);
        {if ("" != null) return attr;}
    throw new Error("Missing return statement in function");
}

//****************** EXPRESSIONS: need to take care of attribute values ******************
// needs lookahead = 2
  static final public Attrib PrimaryExpr() throws ParseException, YAPLException {Token t; Attrib attr; ProcedureType procedureType; Type type; Type returnType;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case number:{
      attr = Literal();
codegen.loadValue(attr); {if ("" != null) return attr;}
      break;
      }
    case PAR_LEFT:{
      jj_consume_token(PAR_LEFT);
      attr = Expr();
      jj_consume_token(PAR_RIGHT);
{if ("" != null) return attr;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_1(2)) {
        attr = ProcedureCall();
// procedureType = (ProcedureType) attr.getType();
                            // returnType = procedureType.getReturnType();
                            if(attr.getType() instanceof VoidType){
                                {if (true) throw new YAPLException(CompilerError.ProcNotFuncExpr, attr.getToken(), attr.getName());}
                            }
                            codegen.loadValue(attr);
                            {if ("" != null) return attr;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ident:{
          t = jj_consume_token(ident);
//check if identifyer is in symboletable of type variable, constants or parameter
              List<Integer> kinds = Arrays.asList(Symbol.Variable, Symbol.Constant, Symbol.Parameter);
              symboletable.checkSymbolKind(t, kinds);

              Symbol sym = symboletable.lookup(t.image);
              attr = new yapl.impl.AttribImpl(sym, t);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DOT:
          case BRACKET_LEFT:{
            attr = Selector(attr);
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            ;
          }
codegen.loadValue(attr);  {if ("" != null) return attr;}
          break;
          }
        case SHARP:{
          attr = ArrayLen();
codegen.loadValue(attr);  {if ("" != null) return attr;}
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

// Here we have calculations so we use codgen class to calc the attribute values
  static final public Attrib UnaryExpr() throws ParseException, YAPLException {Attrib x; Token op = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:{
      op = AddOp();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    x = PrimaryExpr();
if( op != null && !(x.getType() instanceof IntType)){
              {if (true) throw new YAPLException(CompilerError.IllegalOp1Type, op);}
          }
          if( op != null && !(op.image.equals("-")) && !(op.image.equals("+")) ){
               {if (true) throw new YAPLException(CompilerError.IllegalOp1Type, op);}
          }

          if( op != null){
             x = codegen.op1(op, x);
          }

          {if ("" != null) return x;}
    throw new Error("Missing return statement in function");
}

  static final public Attrib MulExpr() throws ParseException, YAPLException {Attrib x, y; Token op = null;
    x = UnaryExpr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:
      case DIV:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_3;
      }
      op = MulOp();
      y = UnaryExpr();
expr_checkError(x, y, op);
         x = codegen.op2(x, op, y);
         x.setToken(y.getToken());
    }
{if ("" != null) return x;}
    throw new Error("Missing return statement in function");
}

  static final public Attrib AddExpr() throws ParseException, YAPLException {Attrib x, y; Token op = null;
    x = MulExpr();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_4;
      }
      op = AddOp();
      y = MulExpr();
expr_checkError(x, y, op);
            x = codegen.op2(x, op, y);
            x.setToken(y.getToken());
    }
{if ("" != null) return x;}
    throw new Error("Missing return statement in function");
}

  static final public Attrib RelExpr() throws ParseException, YAPLException {Attrib x, y; Token op = null;
    // first item       op          second item      calc result
    
         x = AddExpr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LESS:
    case GREATER:
    case LESS_EQUAL:
    case GREATER_EQAUL:{
      op = RelOp();
      y = AddExpr();
expr_checkError(x, y, op);
            x = codegen.relOp(x, op, y);
            x.setType(new BoolType());
            x.setToken(y.getToken());
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
{if ("" != null) return x;}
    throw new Error("Missing return statement in function");
}

  static final public Attrib EqualExpr() throws ParseException, YAPLException {Attrib x, y; Token op = null;
    x = RelExpr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:
    case NOT_EQUAL:{
      op = EqualOp();
      y = RelExpr();
expr_checkError(x, y, op);
          x = codegen.equalOp(x, op, y);
          x.setType(new BoolType());
          x.setToken(y.getToken());
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
{if ("" != null) return x;}
    throw new Error("Missing return statement in function");
}

  static final public Attrib CondAndExpr() throws ParseException, YAPLException {Attrib x, y; Token op = null;
    x = EqualExpr();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_5;
      }
      op = jj_consume_token(AND);
      y = EqualExpr();
expr_checkError(x, y, op);
        x = codegen.relOp(x, op, y);
        x.setType(new BoolType());
        x.setToken(y.getToken());
    }
{if ("" != null) return x;}
    throw new Error("Missing return statement in function");
}

/* CreationExpr = "new" PrimType "[" Expr "]" [ Expr ] . */
  static final public Attrib CreationExpr() throws ParseException, YAPLException {Type type; Attrib result, dimAttr; Token t, t2;
int dim = 0;
    t = jj_consume_token(NEW);
    type = NonArrayType();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRACKET_LEFT:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_6;
      }
      jj_consume_token(BRACKET_LEFT);
      dimAttr = Expr();
      t2 = jj_consume_token(BRACKET_RIGHT);
if(! (dimAttr.getType() instanceof IntType)){
                                        {if (true) throw new YAPLException(CompilerError.BadArraySelector, t2);} // ] is token
                                    }
                                    codegen.storeArrayDim(dim, dimAttr);
                                    dim++;
    }
if(dim > 0){
            // Make ArrayType
            ArrayType A_type = new ArrayType(type, dim);
            //todo understand
            result = codegen.allocArray(A_type);
            result.setToken(t);
            {if ("" != null) return result;}

        }else{
            //if no dimention Expr() it must create a Record Type ('type' must by a record type)
            if(!(type instanceof RecordType)){
                  {if (true) throw new YAPLException(CompilerError.InvalidNewType, t);}
            }
            result = new yapl.impl.AttribImpl(Attrib.RecordField, type, t);
            {if ("" != null) return result;}
        }
    throw new Error("Missing return statement in function");
}

  static final public Attrib Expr() throws ParseException, YAPLException {Attrib x, y; Token op = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:
    case SHARP:
    case PAR_LEFT:
    case TRUE:
    case FALSE:
    case ident:
    case number:{
      x = CondAndExpr();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_7;
        }
        op = jj_consume_token(OR);
        y = CondAndExpr();
expr_checkError(x, y, op);
        x = codegen.relOp(x, op, y);
        x.setType(new BoolType()); //not needed ? duplicated
        x.setToken(y.getToken());
      }
{if ("" != null) return x;}
      break;
      }
    case NEW:{
      x = CreationExpr();
{if ("" != null) return x;}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// *************
  static final public 
List<Attrib> ArgumentList() throws ParseException, YAPLException {List<Attrib> arguments; Attrib attr;
    attr = Expr();
arguments = new ArrayList<Attrib>(); arguments.add(attr);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      attr = Expr();
arguments.add(attr);
    }
{if ("" != null) return arguments;}
    throw new Error("Missing return statement in function");
}

  static final public Attrib ProcedureCall() throws ParseException, YAPLException {Token t; Attrib attr; Symbol sym; List<Attrib> arguments;
arguments = new ArrayList<Attrib>();
    t = jj_consume_token(ident);
List<Integer> kinds = Arrays.asList(Symbol.Procedure);
        symboletable.checkSymbolKind(t, kinds);

        sym = symboletable.lookup(t.image);
        attr = new yapl.impl.AttribImpl(sym, t);
    jj_consume_token(PAR_LEFT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:
    case SHARP:
    case PAR_LEFT:
    case NEW:
    case TRUE:
    case FALSE:
    case ident:
    case number:{
      arguments = ArgumentList();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    t = jj_consume_token(PAR_RIGHT);
ProcedureType procedure = (ProcedureType) sym.getType();
        List<Type> parameters = procedure.getParameters();

        if(parameters.size() > arguments.size()){
            {if (true) throw new YAPLException(CompilerError.TooFewArgs, t, sym.getName());}
        }
        for(int i=0; i<arguments.size(); i++){
            Token t2 = arguments.get(i).getToken();
            if(i >= parameters.size()){
                {if (true) throw new YAPLException(CompilerError.ArgNotApplicable, t2, i+1, sym.getName());}
            }
            Type paraType = parameters.get(i);
            Type argType = arguments.get(i).getType();
            if(!paraType.isCompatible(argType)){
                 {if (true) throw new YAPLException(CompilerError.ArgNotApplicable, t2, i+1, sym.getName());}
            }
        }

        //procedure calc -> returns new attr of type = returntype
        attr.setType(procedure.getReturnType());
        attr.setToken(t); // the closing )

        Attrib[] args = new Attrib[arguments.size()];
        for(int i = 0; i < args.length; i++){
            args[i] = arguments.get(i);
        }
        //list of arguments(attr) needs to be an array
        codegen.callProc(sym, args);
       // codegen.returnFromProc(sym, attr); //todo

        {if ("" != null) return attr;}
    throw new Error("Missing return statement in function");
}

// int a = 5 + 2
  static final public void Assignment() throws ParseException, YAPLException {Token t; Attrib rValue, lValue; Type type;
    t = jj_consume_token(ident);
List<Integer> kinds = Arrays.asList(Symbol.Variable, Symbol.Parameter);
            symboletable.checkSymbolKind(t, kinds);

            Symbol sym = symboletable.lookup(t.image);
            lValue = new yapl.impl.AttribImpl(sym, t);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:
    case BRACKET_LEFT:{
      lValue = Selector(lValue);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    t = jj_consume_token(ASSIGN);
    rValue = Expr();
if(!(lValue.getType().isCompatible(rValue.getType()))){
             {if (true) throw new YAPLException(CompilerError.TypeMismatchAssign, t);}
         }
         codegen.assign(lValue, rValue);
}

// **************** STATMENTS
  static final public 
void IfStatement(Symbol s) throws ParseException, YAPLException {Attrib cond; Token t;
    // if (a && b)
            t = jj_consume_token(IF);
    cond = Expr();
if(!(cond.getType() instanceof BoolType)){
                            {if (true) throw new YAPLException(CompilerError.CondNotBool, cond.getToken());}
                        }
                            String elseLabel = codegen.newLabel();
                            codegen.branchIfFalse(cond, elseLabel);
    jj_consume_token(THEN);
    StatementList(s);
String endLabel = codegen.newLabel();
                                codegen.jump(endLabel);
                                codegen.assignLabel(elseLabel);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      StatementList(s);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
codegen.assignLabel(endLabel);
}

  static final public void WhileStatement(Symbol s) throws ParseException, YAPLException {Attrib cond; Token t;
    t = jj_consume_token(WHILE);
String loopLabel = codegen.newLabel();
                    codegen.assignLabel(loopLabel);
    cond = Expr();
if(!(cond.getType() instanceof BoolType)){
                         {if (true) throw new YAPLException(CompilerError.CondNotBool, cond.getToken());}
                    }
                        String endLabel = codegen.newLabel();
                        codegen.branchIfFalse(cond, endLabel);
    jj_consume_token(DO);
    StatementList(s);
    jj_consume_token(ENDWHILE);
codegen.jump(loopLabel);
                                        codegen.assignLabel(endLabel);
}

  static final public void ReturnStatement(Symbol s) throws ParseException, YAPLException {Attrib attr = null; Token t;
    t = jj_consume_token(RETURN);
s.setReturnSeen(true);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:
    case SHARP:
    case PAR_LEFT:
    case NEW:
    case TRUE:
    case FALSE:
    case ident:
    case number:{
      attr = Expr();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
//check if attr is null and not void function
        // if we have a program
        if(s.getKind() == Symbol.Program && attr != null){
             {if (true) throw new YAPLException(CompilerError.IllegalRetValMain, attr.getToken());}
        }
        // if we have a procedure
        if(s.getKind() != Symbol.Program ){
            ProcedureType procedureType = (ProcedureType) s.getType();
            //if we have attr null procedure must be void
            if( attr == null && !(procedureType.getReturnType() instanceof VoidType)){
                {if (true) throw new YAPLException(CompilerError.InvalidReturnType, t, s.getName());}
            }
            else if ( attr != null ){
                //if we have an return value the procedure return type must be compatible with the value and can not be void
                Type returnType = procedureType.getReturnType();
                if(returnType instanceof VoidType){
                    {if (true) throw new YAPLException(CompilerError.IllegalRetValProc, attr.getToken(), s.getName());}
                }
                if(!returnType.isCompatible(attr.getType())){
                     {if (true) throw new YAPLException(CompilerError.InvalidReturnType, attr.getToken(), s.getName());}
                }
            }
        }
}

  static final public void WriteStatement(Symbol s) throws ParseException, YAPLException {Token t;
    jj_consume_token(WRITE);
    t = jj_consume_token(string);
codegen.writeString(t.image);
}

  static final public void Statement(Symbol s) throws ParseException, YAPLException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      IfStatement(s);
      break;
      }
    case WHILE:{
      WhileStatement(s);
      break;
      }
    case RETURN:{
      ReturnStatement(s);
      break;
      }
    case WRITE:{
      WriteStatement(s);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      if (jj_2_2(2)) {
        Assignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ident:{
          ProcedureCall();
          break;
          }
        case DECL:
        case BEGIN:{
          Block(s);
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public void StatementList(Symbol s) throws ParseException, YAPLException {
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case WRITE:
      case DECL:
      case BEGIN:
      case RETURN:
      case ident:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_9;
      }
      Statement(s);
      jj_consume_token(SEMICOLON);
    }
}

  static final public Token Block(Symbol s) throws ParseException, YAPLException {Token t;
symboletable.openScope(false);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DECL:{
      Decl();
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN);
    StatementList(s);
    t = jj_consume_token(END);
symboletable.closeScope(); {if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

// ******************* Types
  static final public 
Type NonArrayType() throws ParseException, YAPLException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
{if ("" != null) return new IntType();}
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
{if ("" != null) return new BoolType();}
      break;
      }
    case ident:{
      t = jj_consume_token(ident);
List<Integer> kinds = Arrays.asList(Symbol.Typename);
                     symboletable.checkSymbolKind(t, kinds);
                     Symbol sym = symboletable.lookup(t.image);
                     {if ("" != null) return sym.getType();}
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// varDecl() -> type id -> type -> int [][][]
  static final public Type Type() throws ParseException, YAPLException {Type base_type; int counter;
counter = 0;
    base_type = NonArrayType();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRACKET_LEFT:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_10;
      }
      jj_consume_token(BRACKET_LEFT);
      jj_consume_token(BRACKET_RIGHT);
counter++;
    }
if (counter > 0){
                Type type = new ArrayType(base_type, counter);
                {if ("" != null) return type;}
            }else {
                {if ("" != null) return base_type;}
            }
    throw new Error("Missing return statement in function");
}

  static final public Type ReturnType() throws ParseException, YAPLException {Type type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:{
      jj_consume_token(VOID);
{if ("" != null) return new VoidType();}
      break;
      }
    case INT:
    case BOOL:
    case ident:{
      type = Type();
{if ("" != null) return type;}
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// ************** Decl makeSymbols -> need name, kind, types
  static final public 
void ConstDecl() throws ParseException, YAPLException {Token t; Type type; Attrib attr;
    jj_consume_token(CONST);
    t = jj_consume_token(ident);
    jj_consume_token(IS);
    attr = Literal();
type = attr.getType();
    jj_consume_token(SEMICOLON);
Symbol sym = symboletable.makeSymbol(t, Symbol.Constant, type);
        codegen.allocVariable(sym);
        Attrib lattr = new AttribImpl(sym, t);
        codegen.assign(lattr, attr);
}

  static final public List<Symbol> VarDecl() throws ParseException, YAPLException {Token t; Type type; List<Symbol> varSymbols;
varSymbols = new ArrayList<Symbol>();
    type = Type();
    t = jj_consume_token(ident);
// make symbol of kind variable with name <ident>
         Symbol sym = symboletable.makeSymbol(t, Symbol.Variable, type);
         codegen.allocVariable(sym);
         varSymbols.add(sym);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(ident);
// make symbol of kind variable with name <ident>
                Symbol sym2 = symboletable.makeSymbol(t, Symbol.Variable, type);

                codegen.allocVariable(sym2);
                varSymbols.add(sym2);
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return varSymbols;}
    throw new Error("Missing return statement in function");
}

  static final public void TypeDecl() throws ParseException, YAPLException {Token t; RecordType type; List<Symbol> varSymbols; List<Symbol> otherVarSymbols;
    jj_consume_token(RECORD);
    t = jj_consume_token(ident);
// make symbol of kind typename with name <ident>
            // in scope of Decl()
            type = new RecordType(t.image);
            Symbol sym = symboletable.makeSymbol(t, Symbol.Typename, type);
            // open scope for record
            symboletable.openScope(false);
    varSymbols = VarDecl();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOL:
      case ident:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_12;
      }
      otherVarSymbols = VarDecl();
varSymbols.addAll(otherVarSymbols);
    }
    t = jj_consume_token(ENDRECORD);
type.setFields(varSymbols);
         symboletable.closeScope();
    jj_consume_token(SEMICOLON);
}

  static final public void Decl() throws ParseException, YAPLException {
    jj_consume_token(DECL);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOL:
      case CONST:
      case RECORD:
      case ident:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_13;
      }
      if (jj_2_3(2)) {
        ConstDecl();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOL:
        case ident:{
          VarDecl();
          break;
          }
        case RECORD:{
          TypeDecl();
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public Type FormalParam() throws ParseException, YAPLException {Token t; Type type;
    type = Type();
    t = jj_consume_token(ident);
// make symbol of kind parameter with name <ident>
            symboletable.makeSymbol(t, Symbol.Parameter, type);
            {if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  static final public List<Type> FormalParamList() throws ParseException, YAPLException {List<Type> parameters; Type type;
parameters = new ArrayList<Type>();
    type = FormalParam();
parameters.add(type);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      type = FormalParam();
parameters.add(type);
    }
{if ("" != null) return parameters;}
    throw new Error("Missing return statement in function");
}

  static final public void Procedure() throws ParseException, YAPLException {Token t; Type type, procedureType; List<Type> parameters; Symbol s;
parameters = new ArrayList<Type>();
    jj_consume_token(PROCEDURE);
    type = ReturnType();
    t = jj_consume_token(ident);
// make symbol of kind procedure with name <ident>
            // scope of procedure is nested in the scope of the program (global)
            s = symboletable.makeSymbol(t, Symbol.Procedure, null);      // public int write(){}                                                        // int a = write()
            // open scope of procedure
            symboletable.openScopeWithParent(false, s);
    jj_consume_token(PAR_LEFT);
symboletable.openScope(false);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOL:
    case ident:{
      parameters = FormalParamList();
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      ;
    }
procedureType = new ProcedureType(type, parameters); s.setType(procedureType);
    jj_consume_token(PAR_RIGHT);
    t = Block(s);
ProcedureType proType = (ProcedureType) s.getType();
                              // error if not a void and now return seen.
                              if( (!(proType.getReturnType() instanceof VoidType)) && (!s.getReturnSeen())){
                                  {if (true) throw new YAPLException(CompilerError.MissingReturn, t, s.getName());}
                              }

                            symboletable.closeScope();
    t = jj_consume_token(ident);
symboletable.checkProcedureEnd(t);
            symboletable.closeScope();
    jj_consume_token(SEMICOLON);
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_16()
 {
    if (jj_scan_token(ident)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_scan_token(ident)) return true;
    if (jj_scan_token(PAR_LEFT)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_scan_token(BRACKET_LEFT)) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_scan_token(CONST)) return true;
    if (jj_scan_token(ident)) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_20()) return false;
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x3c00,0x18000,0x60000,0x380000,0xc0000000,0x2000100,0x2000100,0x2000100,0x2000100,0xc0800000,0x400000,0x60000,0x380000,0x60000,0x3c00,0x18000,0x0,0x2000000,0x0,0xe0c60000,0x80,0xe0c60000,0x2000100,0x0,0xe0c60000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x80,0x0,0x0,0x0,0x80,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x10000,0x20400,0x1000c00,0x11000,0x11000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x2000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x3000000,0x0,0x3000000,0x0,0x10,0x3000000,0x40244,0x1003000,0x1043244,0x1000,0x1000c00,0x0,0x1020c00,0x0,0x1000c00,0x1180c00,0x1100c00,0x0,0x1000c00,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[60];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 43; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 60; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 3; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
