PARSER_BEGIN(Parser)

package yapl.compiler;
import java.io.*;
import yapl.lib.*;
import yapl.impl.SymboltableImpl;
import yapl.interfaces.Symbol;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import yapl.interfaces.Attrib;
import yapl.compiler.CodeGenImpl;
import yapl.impl.AttribImpl;
import yapl.interfaces.CompilerError;

public class Parser {

    static String program = ""; //program name = identifier in Program production
    static CodeGenImpl codegen = new CodeGenImpl();
    static SymboltableImpl symboletable = new SymboltableImpl();
    static CompilerMessage msg = new CompilerMessage(); //prints to System.er (is set to log file in main)


    /** Main entry point. */
    public static void main(String args[]) throws IOException {
        Parser parser;
        OutputStream logFile;

        try {
            PrintStream printStream = new PrintStream(args[2]); //args[2] is the log file
            System.setErr(printStream); //now it prints to the log file

            //** parse predefined Procedures ***
            parser = new Parser(new java.io.FileInputStream(args[0])); //args[0] is location of predefinedProcedures
            try{
                parser.PredefinedProcedures();
            }catch(ParseException pe){
                 //throws ParseException on syntax errors; errorNo=3
                 msg.printError(pe, program);
            }catch(TokenMgrError te){
                  //throws TokenMgrError on lexical errors; errorNo=2
                 msg.printError(te, program);
            }catch(YAPLException e){
                 msg.printError(e, program);
            }
        }catch(java.io.FileNotFoundException e){
            System.out.println ("Parser: Logfile or predefinded procedures were not found.");
            return;
        }

        try{
            //** parse the program ***
            //parser = new Parser(new java.io.FileInputStream(args[1]));
            parser.ReInit(new java.io.FileInputStream(args[1]));
            try{
                 parser.Program(); //call start production
                 msg.printOK(program);

            }catch(ParseException pe){
                //throws ParseException on syntax errors; errorNo=3
                msg.printError(pe, program);

            }catch(TokenMgrError te){
                 //throws TokenMgrError on lexical errors; errorNo=2
                msg.printError(te, program);
            }catch(YAPLException e){
                 msg.printError(e, program);
            }

        }catch(java.io.FileNotFoundException e){
            System.out.println ("Parser: Input file was not found.");
            return;
        }

    }

    public static void setProgramName(String ident){
         program = ident;
    }

    public static void expr_checkError(Attrib x, Attrib y, Token op) throws YAPLException{


        // check if x & y are compatible with op
        List<String> int_op = List.of("*", "/", "%", "+" , "-");
        if(int_op.contains(op.image) && (!(x.getType() instanceof IntType) || !(y.getType() instanceof IntType))){
           throw new YAPLException(CompilerError.IllegalOp2Type, op);
        }

        List<String> rel_op = List.of("<", "<=", ">", ">=");
        if(rel_op.contains(op.image) && (!(x.getType() instanceof IntType) || !(y.getType() instanceof IntType))){
           throw new YAPLException(CompilerError.IllegalRelOpType, op);
        }

        List<String> equ_op = List.of("==", "!=");
        Boolean con1 = (x.getType() instanceof IntType || x.getType() instanceof BoolType);
        Boolean con2 = (y.getType() instanceof IntType || y.getType() instanceof BoolType);
        Boolean con3 = x.getType().isCompatible(y.getType());

        if(equ_op.contains(op.image) && !(con1 && con2 && con3)){
            throw new YAPLException(CompilerError.IllegalEqualOpType, op);
        }

        List<String> con_op = List.of("And", "Or");
        if(con_op.contains(op.image) && (!(x.getType() instanceof BoolType) || !(y.getType() instanceof BoolType))){
            throw new YAPLException(CompilerError.IllegalOp2Type, op);
        }

        //check if x & y are compatible
        if ( !x.getType().isCompatible(y.getType())){
             throw new YAPLException(CompilerError.IllegalOp2Type, op);
        }

    }

}

PARSER_END(Parser)

/** Ignore matches of these regular expressions **/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN:
{
    //Comments are enclosed by the character sequences /* and */ and must not be nested.
    <comment: "/*" ("/"~["*"] | ~["/"]"*" | ~["/", "*"])* "*/">
}

TOKEN :
{

       /* Separators */
      	   < SEMICOLON: ";" >
      	|   < COMMA: "," >
      	|   < DOT: ".">
      	|   < ASSIGN: ":=" >
      	/* Operator Symbols */
      	|   < LESS: "<" >
      	|   < GREATER: ">" >
      	|   < LESS_EQUAL: "<=" >
        |   < GREATER_EQAUL: ">=" >
        |   < IS: "=">
      	|   < EQUAL: "==" >
      	|   < NOT_EQUAL: "!=" >
      	|   < PLUS: "+" >
      	|   < MINUS: "-" >
      	|   < MULT: "*" >
      	|   < DIV: "/">
      	|   < MOD: "%">
      	|   < SHARP: "#" >
      	/* Parentheses and Brackets */
      	|   < PAR_LEFT: "(" >
      	|   < PAR_RIGHT: ")" >
      	|   < BRACKET_LEFT: "[" >
      	|   < BRACKET_RIGHT: "]" >
      	|   < CURLY_LEFT: "{" >
      	|   < CURLY_RIGHT: "}">
      	/* Keywords */
      	|   < NEW: "new" >
      	|   < TRUE: "True" >
      	|   < FALSE: "False" >
      	|   < AND: "And">
      	|   < OR: "Or">
      	|   < IF: "If" >
      	|   < THEN: "Then" >
      	|   < ELSE: "Else" >
      	|   < ENDIF: "EndIf" >
      	|   < WHILE: "While" >
      	|   < DO: "Do" >
      	|   < ENDWHILE: "EndWhile" >
      	|   < WRITE: "Write" >
      	|   < INT: "int" >
      	|   < BOOL: "bool" >
      	|   < DECL: "Declare" >
      	|   < BEGIN: "Begin" >
      	|   < END: "End" >
      	|   < PROGRAM: "Program" >
      	|   < PROCEDURE: "Procedure">
      	|   < VOID: "void" >
      	|   < RETURN: "Return">
      	|   < CONST: "Const">
      	|   < RECORD: "Record">
      	|   < ENDRECORD: "EndRecord">
  |
  <  string: "\"" (" " | <letter> | <digit> | <otherchar> )* "\"" >
  |
  <  otherchar: ["+", "-", "*", "/", ".", ",", ";", ":", "!", "?", "=",
                      "#", "%", "<", ">", "$", "(", ")", "[", "]", "{", "}", "\\", "@", "&", "^", "|" ]>
  |
  <  ident: <letter> (<letter> | <digit>)* >
  |
  <  number: (<digit>)+ >  //(one or more)
  |
  //IMPORTANT To define letter / digit etc in the end so longest token gets matched first
  //e.g. int i -> i will be matched as ident not letter
  <  letter: ["a"-"z","A"-"Z", "_"] >
  |
  <  digit:  ["0"-"9"] > //alternative \d

}



// ************** Predefined Procedures *******************

void PredefinedProcedures() throws YAPLException: {}
{
    //open global scope for predefined procedures
   {symboletable.openScope(true);}
   (ProcedureHead())*  <EOF>
}

void ProcedureHead() throws YAPLException:
{ Token t, id; Type returntype; List<Type> parameters; }
{
    // [ public void writeint ([ int a]);
    {parameters = new ArrayList<>();}
    <PROCEDURE> (t = <INT> { returntype = new IntType(); } | t = <VOID> {returntype = new VoidType(); })
     id = <ident>
    // open local scope and close scope of parameter
    <PAR_LEFT> {symboletable.openScope(false);} [ parameters = FormalParamList()] <PAR_RIGHT>
     {
         symboletable.closeScope();
         ProcedureType type = new ProcedureType(returntype, parameters);
         symboletable.makeSymbol(id, Symbol.Procedure, type);
     }
     <SEMICOLON>
}

// *************** Program *********************************

/** Root production. Tutor called it ASTProgram Program()*/
void Program() throws YAPLException: { Token t; Symbol s;}
{

    <PROGRAM>
    (t=<ident>){
         setProgramName(t.toString());
          // make symbol of kind 'program' with name <ident>,
          // belongs to scope of global namespace containing predefined procedures
         s = symboletable.makeSymbol(t, Symbol.Program, null);
          // open scope of program global
         symboletable.openScopeWithParent(true, s);
    }

    (Decl() | Procedure())*  // this part is global

    (t = <BEGIN>) //codegen.enterMain();

    StatementList(s)

    (t =<END>) // codegen.exitMain();  // program start

     // The identiÔ¨Åer denoting the end  must be equal to the  program name.
    (t = <ident>){
          symboletable.checkProgramEnd(t);
          //close scope of program
          symboletable.closeScope();
          symboletable.closeScope();        // closes scope of predefined procedures
    } "." <EOF>
}


/** OPERATORS **/
Token RelOp(): { Token t;}
{
    t = <LESS> {return t;}
    | t = <LESS_EQUAL>  {return t;}
    | t =  <GREATER_EQAUL>  {return t;}
    | t =  <GREATER> {return t;}
}

Token EqualOp(): { Token t; }
{
     t = <EQUAL> {return t;}
     | t =  <NOT_EQUAL>{return t;}
}

Token AddOp (): {Token t;}
{
     t =  <PLUS>{return t;}
     | t = <MINUS>{return t;}
}

Token MulOp (): {Token t;}
{
     t = <MULT> {return t;}
     | t = <DIV> {return t;}
     | t =  <MOD>{return t;}
}



//** **//
Attrib Literal (): { Token tok; }
{
     tok = <TRUE> { return new yapl.impl.AttribImpl(Attrib.Constant, new BoolType(true), tok); }     //Atrribute gets kind and type
     | tok = <FALSE> { return new yapl.impl.AttribImpl(Attrib.Constant, new BoolType(false), tok); }
     | tok = <number> { return new yapl.impl.AttribImpl(Attrib.Constant, new IntType(Integer.parseInt(tok.image)), tok); }
}


Attrib Selector (Attrib leftside) throws YAPLException: { Token t, t2; Attrib attr; Type type;}
{
    // ( x | y ) selector
    // Array Selector array[index][]
    ( t = <BRACKET_LEFT> attr = Expr() t2 = <BRACKET_RIGHT>{

                            if( !(leftside.getType() instanceof ArrayType)){
                                    throw new YAPLException(CompilerError.SelectorNotArray, t); // [ is the token
                            }
                            if (!(attr.getType() instanceof IntType)){
                                    throw new YAPLException(CompilerError.BadArraySelector, t2); // ] is the token
                            }
                            ArrayType array = (ArrayType) leftside.getType();
                            int dim = array.getDim();
                            if( dim < 1){
                                throw new YAPLException(CompilerError.BadArraySelector, t2); // ] is the token
                            }
                            if(dim == 1){
                                //  a[] // singel index expresion -> a.subarray() (type)
                                type = array.getBase();
                                attr = new AttribImpl(leftside.getKind(), type, attr.getToken()); //todo is kind right?

                            }else{
                                //  a[][][]  a.dim() = 3 //-> a.base() (type)
                                type = array.getSubarray();
                                attr = new AttribImpl(leftside.getKind(), type, attr.getToken()); //todo is kind right?

                            }
                                // todo understand
                               //codegen.arrayOffset(leftside, attr);

                            }

     // Record Selector recordtype.fieldname
     | t2 = <DOT> t = <ident> {
           if( !(leftside.getType() instanceof RecordType)){
                    throw new YAPLException(CompilerError.SelectorNotRecord, t2);
           }
           RecordType record = (RecordType) leftside.getType();
           Type fieldType = record.getFieldType(t.image);
           if(fieldType == null){
                String recordName = record.getRecord_name();
                //String fieldName = t.image;
                throw new YAPLException(CompilerError.InvalidRecordField, t, recordName);
           }
           //attr incase of Selector
           attr = new AttribImpl(leftside.getKind(), fieldType, t); //todo is kind right?

        }

     ) [ attr = Selector(attr) ]
     { return attr; }
}

Attrib ArrayLen () throws YAPLException: { Token t, t2; Symbol sym; Attrib attr; Type type; int length;}
{
    // #a
     t2 = <SHARP>
     //check if identifyer is in symboletable of kind variable or parameter
     (t = <ident>){
        List<Integer> kinds = Arrays.asList(Symbol.Variable, Symbol.Parameter);
        symboletable.checkSymbolKind(t, kinds);
        //make attribute for selector
        sym = symboletable.lookup(t.image);
        attr = new yapl.impl.AttribImpl(sym, t);
        //need to check symbole type
        if(!(sym.getType() instanceof ArrayType)){
           throw new YAPLException(CompilerError.ArrayLenNotArray, t2);
        }

        //todo length of ident incase there is no []
        length = -1; //todo calculate length

     } [ attr = Selector(attr)
             {
                // if we have a[] we need to make sure this returns array
                if(!(attr.getType() instanceof ArrayType)){
                   throw new YAPLException(CompilerError.ArrayLenNotArray, t2);
                }
                length = -1; //todo calculate length

             }
        ]
     {
        attr = new yapl.impl.AttribImpl(Attrib.Constant, new IntType(length), t);
        return attr;
     }
}



//****************** EXPRESSIONS: need to take care of attribute values ******************
// needs lookahead = 2
Attrib PrimaryExpr () throws YAPLException: { Token t; Attrib attr; ProcedureType procedureType; Type type; Type returnType;}
{

      attr = Literal() { return attr;}
      | <PAR_LEFT> attr = Expr() <PAR_RIGHT> { return attr;}

      | LOOKAHEAD(2) attr = ProcedureCall() {
                            // procedureType = (ProcedureType) attr.getType();
                            // returnType = procedureType.getReturnType();
                            if(attr.getType() instanceof VoidType){
                                throw new YAPLException(CompilerError.ProcNotFuncExpr, attr.getToken(), attr.getName());
                            }
                            return attr;
                        }

      |(t = <ident>){
                //check if identifyer is in symboletable of type variable, constants or parameter
              List<Integer> kinds = Arrays.asList(Symbol.Variable, Symbol.Constant, Symbol.Parameter);
              symboletable.checkSymbolKind(t, kinds);

              Symbol sym = symboletable.lookup(t.image);
              attr = new yapl.impl.AttribImpl(sym, t);
            }
             [ attr = Selector(attr)  ]
             { return attr; }

      | attr = ArrayLen() {return attr;}
}

// Here we have calculations so we use codgen class to calc the attribute values
Attrib UnaryExpr () throws YAPLException: {Attrib x; Token op = null;}
{
     [op = AddOp()] x = PrimaryExpr()
     {
          if( op != null && !(x.getType() instanceof IntType)){
              throw new YAPLException(CompilerError.IllegalOp1Type, op);
          }
          if( op != null && !(op.image.equals("-")) && !(op.image.equals("+")) ){
               throw new YAPLException(CompilerError.IllegalOp1Type, op);
          }

          if( op != null){
            //x = codegen.op1(op, x);
          }

          return x;
      }
}

Attrib MulExpr () throws YAPLException: {Attrib x, y; Token op = null;}
{
     x = UnaryExpr() ( op = MulOp() y = UnaryExpr() {
         expr_checkError(x, y, op);
         //x = codegen.op2(x, op, y);
         x.setToken(y.getToken());
     } )*
              {return x;}
}

Attrib AddExpr () throws YAPLException: {Attrib x, y; Token op = null;}
{
     x = MulExpr() ( op = AddOp() y = MulExpr() {
            expr_checkError(x, y, op);
            //x = codegen.op2(x, op, y);
            x.setToken(y.getToken());
            } )*
      {return x;}
}

Attrib RelExpr () throws YAPLException: { Attrib x, y; Token op = null;}
{
    // first item       op          second item      calc result
     x = AddExpr() [ op = RelOp()  y = AddExpr() {
            expr_checkError(x, y, op);
            //x = codegen.relOp(x, op, y);
            x.setType(new BoolType());
            x.setToken(y.getToken());
            }]
     {return x;}

}

Attrib EqualExpr () throws YAPLException: {Attrib x, y; Token op = null;}
{
     x = RelExpr() [ op = EqualOp() y = RelExpr() {
          expr_checkError(x, y, op);
        //x = codegen.relOp(x, op, y);
          x.setType(new BoolType());
          x.setToken(y.getToken());
        }]
      {return x;}
}

Attrib CondAndExpr () throws YAPLException: {Attrib x, y; Token op = null;}
{
	x= EqualExpr() ( op = <AND> y= EqualExpr() {
        expr_checkError(x, y, op);
        ///x = codegen.relOp(x, op, y);
        x.setType(new BoolType());
        x.setToken(y.getToken());
        })*
	{return x;}
}

/* CreationExpr = "new" PrimType "[" Expr "]" [ Expr ] . */
Attrib CreationExpr () throws YAPLException: { Type type; Attrib result, dimAttr; Token t, t2;}
{

    { int dim = 0;}
	t = <NEW>  type = NonArrayType()  ( <BRACKET_LEFT> dimAttr = Expr() t2 = <BRACKET_RIGHT> {
                                    if(! (dimAttr.getType() instanceof IntType)){
                                        throw new YAPLException(CompilerError.BadArraySelector, t2); // ] is token
                                    }
                                    //todo understand
                                    //codegen.storeArrayDim(0, dimAttr);
                                    dim++; } )*
	{
        if(dim > 0){
            // Make ArrayType
            ArrayType A_type = new ArrayType(type, dim);
            //todo understand
            //result = codegen.allocArray(A);
            result = new yapl.impl.AttribImpl(Attrib.Constant, A_type, t);
            return result;

        }else{
            //if no dimention Expr() it must create a Record Type ('type' must by a record type)
            if(!(type instanceof RecordType)){
                  throw new YAPLException(CompilerError.InvalidNewType, t);
            }
            result = new yapl.impl.AttribImpl(Attrib.Constant, type, t);
            return result;
        }



    }

}

Attrib Expr () throws YAPLException: { Attrib x, y; Token op = null; }
{
	x = CondAndExpr() ( op =<OR> y= CondAndExpr() {
        expr_checkError(x, y, op);
        //x = codegen.relOp(x, op, y);
        x.setType(new BoolType());
        x.setToken(y.getToken());
        } )*
     {return x;}

	| x = CreationExpr()  {return x;}    // int a = new A();
}

// *************

List<Attrib> ArgumentList () throws YAPLException: {List<Attrib> arguments; Attrib attr;}
{
	attr = Expr() { arguments = new ArrayList<Attrib>(); arguments.add(attr);}
	( <COMMA> attr = Expr() {arguments.add(attr);} )*
	{return arguments;}
}

Attrib ProcedureCall () throws YAPLException: { Token t; Attrib attr; Symbol sym; List<Attrib> arguments;}
{
    {arguments = new ArrayList<Attrib>(); }
    //check if identifyer is in symboletable of type procedure
	(t = <ident>){
        List<Integer> kinds = Arrays.asList(Symbol.Procedure);
        symboletable.checkSymbolKind(t, kinds);

        sym = symboletable.lookup(t.image); // 2. readint()
        attr = new yapl.impl.AttribImpl(sym, t);   // readint

    } <PAR_LEFT> [ arguments = ArgumentList() ] t = <PAR_RIGHT>     // argument = readint() / none

    {

        ProcedureType procedure = (ProcedureType) sym.getType(); //proc()   / readint()
        List<Type> parameters = procedure.getParameters(); // int a / empty

        if(parameters.size() > arguments.size()){   // 2. 0
            throw new YAPLException(CompilerError.TooFewArgs, t, sym.getName());
        }
        for(int i=0; i<arguments.size(); i++){
            Token t2 = arguments.get(i).getToken();
            if(i >= parameters.size()){
                throw new YAPLException(CompilerError.ArgNotApplicable, t2, i+1, sym.getName());
            }
            Type paraType = parameters.get(i); // int
            Type argType = arguments.get(i).getType();  // int
            if(!paraType.isCompatible(argType)){
                 throw new YAPLException(CompilerError.ArgNotApplicable, t2, i+1, sym.getName());
            }
        }

        //procedure calc -> returns new attr of type = returntype
        attr.setType(procedure.getReturnType());
        attr.setToken(t); // the closing )

        return attr;} // readInt() -> int
}

// int a = 5 + 2
void Assignment () throws YAPLException: { Token t; Attrib rValue, lValue; Type type;}
{
  // check if identifyer is in symboletable of type variable or parameter
	(t = <ident>){
            List<Integer> kinds = Arrays.asList(Symbol.Variable, Symbol.Parameter);
            symboletable.checkSymbolKind(t, kinds);

            Symbol sym = symboletable.lookup(t.image);
            lValue = new yapl.impl.AttribImpl(sym, t);

    } [  lValue = Selector(lValue) ]

    t =  <ASSIGN>
     rValue = Expr()        // = attribut of value 7

     // assign 'a' the value of 7
     {
         if(!(lValue.getType().isCompatible(rValue.getType()))){
             throw new YAPLException(CompilerError.TypeMismatchAssign, t);
         }
        // codegen.assign(lValue, rValue);
     }
}

// **************** STATMENTS

void IfStatement (Symbol s) throws YAPLException: { Attrib cond; Token t;}
{
    // if (a && b)
	t = <IF> cond = Expr() {
                        if(!(cond.getType() instanceof BoolType)){
                            throw new YAPLException(CompilerError.CondNotBool, cond.getToken());
                        }
                                // todo understand
                         //String elseLabel = codegen.newLabel();
                         //codegen.branchIfFalse(cond, elseLabel);
                         }

	<THEN> StatementList(s) {
                          //  String endLabel = codegen.newLabel();
                          //  codegen.jump(endLabel);
                          //  codegen.assignLabel(elseLabel);
                            }
	[ <ELSE> StatementList(s) ]
	<ENDIF> { //codegen.assignLabel(endLabel);
                        }
}

void WhileStatement (Symbol s) throws YAPLException: { Attrib cond; Token t;}
{

	t = <WHILE> {	//String loopLabel = codegen.newLabel();
            	 //codegen.assignLabel(loopLabel);
            	 }
    cond = Expr() {
	                if(!(cond.getType() instanceof BoolType)){
                         throw new YAPLException(CompilerError.CondNotBool, cond.getToken());
                    }
	                //String endLabel = codegen.newLabel();
                  	//codegen.branchIfFalse(cond, endLabel);
                  	}
    <DO> StatementList(s) <ENDWHILE> { 	//codegen.jump(loopLabel);
                                    	//codegen.assignLabel(endLabel);
                                    	}
}

void ReturnStatement (Symbol s) throws YAPLException: { Attrib attr = null; Token t; }
{

   	t = <RETURN> { s.setReturnSeen(true); }	[ attr = Expr() ]

     {  //check if attr is null and not void function
        // if we have a program
        if(s.getKind() == Symbol.Program && attr != null){
             throw new YAPLException(CompilerError.IllegalRetValMain, attr.getToken());
        }
        // if we have a procedure
        if(s.getKind() != Symbol.Program ){
            ProcedureType procedureType = (ProcedureType) s.getType();
            //if we have attr null procedure must be void
            if( attr == null && !(procedureType.getReturnType() instanceof VoidType)){
                throw new YAPLException(CompilerError.InvalidReturnType, t, s.getName());
            }
            else if ( attr != null ){
                //if we have an return value the procedure return type must be compatible with the value and can not be void
                Type returnType = procedureType.getReturnType();
                if(returnType instanceof VoidType){
                    throw new YAPLException(CompilerError.IllegalRetValProc, attr.getToken(), s.getName());
                }
                if(!returnType.isCompatible(attr.getType())){
                     throw new YAPLException(CompilerError.InvalidReturnType, attr.getToken(), s.getName());
                }
            }
        }

	 }
}

void WriteStatement (Symbol s) throws YAPLException: { Token t;}
{
	<WRITE> t = <string> { //codegen.writeString(t.image);
                        }
}

void Statement (Symbol s) throws YAPLException: {Token t;}
{
    //Assignment & ProcedureCall start both with <identifyer>
	IfStatement(s) | WhileStatement(s) | ReturnStatement(s)  | WriteStatement(s) |  LOOKAHEAD(2) Assignment() | ProcedureCall() | Block(s)
}

void StatementList (Symbol s) throws YAPLException: {}
{
	( Statement(s) <SEMICOLON> )*
}

Token Block (Symbol s) throws YAPLException: { Token t; }       //token is just to give the right error possition
{
    {symboletable.openScope(false);}

	[ Decl() ]	<BEGIN> StatementList(s) t= <END>

	{symboletable.closeScope(); return t;}
}

// ******************* Types

Type NonArrayType () throws YAPLException: { Token t;}
{
    //     check if identifyer has been declared as record names
	<INT> { return new IntType(); }

	| <BOOL> { return new BoolType(); }


	| (t = <ident>){
                     List<Integer> kinds = Arrays.asList(Symbol.Typename);
                     symboletable.checkSymbolKind(t, kinds);
                     Symbol sym = symboletable.lookup(t.image);
                     return sym.getType();
                    }

}

// varDecl() -> type id -> type -> int [][][]
Type Type() throws YAPLException: { Type base_type; int counter;}
{
	{counter = 0;}
	base_type = NonArrayType() //int -> base type
	//if brackets we have an array need to count the dim
	( <BRACKET_LEFT> <BRACKET_RIGHT> {counter++;} )* //count -> dim
	{
	    if (counter > 0){
	        Type type = new ArrayType(base_type, counter);
	        return type;
	    }else {
	        return base_type;
	    }
	}


}

Type ReturnType () throws YAPLException: { Type type;}
{
	<VOID> {return new VoidType();} | type = Type() {return type;}
}


// ************** Decl makeSymbols -> need name, kind, types

void ConstDecl () throws YAPLException: { Token t; Type type; Attrib attr;}
{
	 <CONST> t = <ident>  <IS> attr = Literal() { type = attr.getType();} <SEMICOLON>
	 { Symbol sym = symboletable.makeSymbol(t, Symbol.Constant, type);}
       //todo maybe alloc smth
}


List<Symbol> VarDecl () throws YAPLException: { Token t; Type type; List<Symbol> varSymbols;}
{
    {varSymbols = new ArrayList<Symbol>();}
	type = Type()
	(t = <ident>){
         // make symbol of kind variable with name <ident>
         Symbol sym = symboletable.makeSymbol(t, Symbol.Variable, type);
        // codegen.allocVariable(sym);
         varSymbols.add(sym);
    }
	( <COMMA>
	        (t = <ident>){
                // make symbol of kind variable with name <ident>
                Symbol sym2 = symboletable.makeSymbol(t, Symbol.Variable, type);
               /// codegen.allocVariable(sym2);
                 varSymbols.add(sym2);
            }

        )* <SEMICOLON>
        {return varSymbols;}
}


void TypeDecl () throws YAPLException: { Token t; RecordType type; List<Symbol> varSymbols; List<Symbol> otherVarSymbols;}
{
	 <RECORD>
	 (t = <ident>){
	    // make symbol of kind typename with name <ident>
	    // in scope of Decl()
	    type = new RecordType(t.image);
	    Symbol sym = symboletable.makeSymbol(t, Symbol.Typename, type);
	    // open scope for record
	    symboletable.openScope(false);
	 }

	 varSymbols = VarDecl() ( otherVarSymbols = VarDecl() {varSymbols.addAll(otherVarSymbols);} )*
	 (t = <ENDRECORD>)
     {
         type.setFields(varSymbols);
         symboletable.closeScope();
     } <SEMICOLON>
}

void Decl () throws YAPLException: {}
{
    //ConstDecl starts with <ident>,
    // VardDec with Type, Type starts with NonArrayType and NonArrayType can start with <ident> too.
	 <DECL> (LOOKAHEAD(2) ConstDecl() |   VarDecl() | TypeDecl() )*
}

Type FormalParam () throws YAPLException: { Token t; Type type;}
{
    type = Type()
    (t = <ident>){
            // make symbol of kind parameter with name <ident>
            symboletable.makeSymbol(t, Symbol.Parameter, type);
            return type;
           }
}

List<Type> FormalParamList () throws YAPLException: { List<Type> parameters; Type type;}
{
    {parameters = new ArrayList<Type>();}
	type = FormalParam() {parameters.add(type);}
	( <COMMA>  type = FormalParam() {parameters.add(type);} )*
	{return parameters;}
}

void Procedure () throws YAPLException: { Token t; Type type, procedureType; List<Type> parameters; Symbol s;}
{
    {parameters = new ArrayList<Type>();}
     <PROCEDURE> type = ReturnType()
     (t = <ident>){
     	    // make symbol of kind procedure with name <ident>
     	    // scope of procedure is nested in the scope of the program (global)
     	    s = symboletable.makeSymbol(t, Symbol.Procedure, null);      // public int write(){}                                                        // int a = write()
     	    // open scope of procedure
     	    symboletable.openScopeWithParent(false, s);
     }

     // open / close scope formal Parameters
     <PAR_LEFT> {symboletable.openScope(false);}
     [ parameters = FormalParamList() ] { procedureType = new ProcedureType(type, parameters); s.setType(procedureType);}

     <PAR_RIGHT>  t = Block(s) {
                            ProcedureType proType = (ProcedureType) s.getType();
                              // error if not a void and now return seen.
                              if( (!(proType.getReturnType() instanceof VoidType)) && (!s.getReturnSeen())){
                                  throw new YAPLException(CompilerError.MissingReturn, t, s.getName());
                              }

                            symboletable.closeScope();}

     // The identiÔ¨Åer denoting the end  must be equal to the procedure name.
      (t = <ident>){

            symboletable.checkProcedureEnd(t);
            symboletable.closeScope();
      } <SEMICOLON>
}

